{"ast":null,"code":"var _jsxFileName = \"/home/ghimmy/Desktop/My React App/amazon-test/src/Payment.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport CheckoutProduct from \"./CheckoutProduct\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getBasketTotal } from \"./reducer\";\nimport axios from \"./axios\"; // // import { v5 as uuidv5 } from 'uuid';\n// import { db } from \"./firebase\";\n\nimport { usePaystackPayment } from 'react-paystack';\n\nconst PaystackHookExample = () => {\n  const history = useHistory();\n  const [{\n    basket,\n    user\n  }, dispatch] = useStateValue();\n  const config = {\n    reference: new Date().getMilliseconds(),\n    email: \"user@example.com\",\n    amount: `${getBasketTotal(basket) * 100}`,\n    publicKey: 'pk_test_62b5022242e04bcea510a48244390c6d18a4581f'\n  }; // you can call this function anything\n\n  const onSuccess = reference => {\n    // Implementation for whatever you want to do with reference and after success call.\n    console.log(reference);\n    dispatch({\n      type: \"EMPTY_BASKET\"\n    });\n    history.replace(\"/orders\");\n  }; // you can call this function anything\n\n\n  const onClose = () => {\n    // implementation for  whatever you want to do when the Paystack dialog closed.\n    console.log('closed');\n  };\n\n  const initializePayment = usePaystackPayment(config);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      initializePayment(onSuccess, onClose);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, \"Paystack Hooks Implementation\"));\n};\n\nfunction Payment() {\n  const [{\n    basket,\n    user\n  }, dispatch] = useStateValue();\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(true); // useEffect(() => {\n  //   // generate the special stripe secret which allows us to charge a customer\n  //   const getClientSecret = async () => {\n  //     const response = await axios({\n  //       method: \"post\",\n  //       // Stripe expects the total in a currencies subunits\n  //       url: `/payments/create?total=${getBasketTotal(basket) * 100}`,\n  //       data: {\n  //         email: 'customer@email.com',\n  //        currency: 'NGN'\n  //       }\n  //     }).then((response) => {\n  //       console.log(response);\n  //     }, (error) => {\n  //       console.log(error);\n  //     })\n  //     setClientSecret(response.data.clientSecret);\n  //   };\n  //   getClientSecret();\n  // }, [basket]);\n  // console.log(\"THE SECRET IS >>>\", clientSecret);\n  // console.log('ðŸ‘±', user)\n\n  const handleSubmit = async event => {\n    // do all the fancy stripe stuff...\n    event.preventDefault();\n    setProcessing(true);\n    await axios({\n      method: \"post\",\n      // Stripe expects the total in a currencies subunits\n      url: `/payments/create?total=${getBasketTotal(basket) * 100}`,\n      data: {\n        email: \"customer@email.com\",\n        currency: \"NGN\"\n      }\n    }).then(response => {\n      console.log(response);\n    }, error => {\n      console.log(error);\n    }); // await stripe\n    //   .confirmCardPayment(clientSecret, {\n    //     payment_method: {\n    //       card: elements.getElement(CardElement),\n    //     },\n    //   })\n    //   .then(({ paymentIntent }) => {\n    //     // paymentIntent = payment confirmation\n    //     console.log(\"THE PAYMENT INTENT IS >>>\", paymentIntent);\n    //     db.collection(\"users\")\n    //       .doc(user?.uid)\n    //       .collection(\"orders\")\n    //       .doc(paymentIntent.id)\n    //       .set({\n    //         basket: basket,\n    //         amount: paymentIntent.amount,\n    //         created: paymentIntent.created,\n    //       });\n\n    setSucceeded(true);\n    setError(null);\n    setProcessing(false); //   });\n  };\n\n  const handleChange = event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"Checkout (\", /*#__PURE__*/React.createElement(Link, {\n    to: \"/checkout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 21\n    }\n  }, basket === null || basket === void 0 ? void 0 : basket.length, \" items\"), \")\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"Delivery Address\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, user === null || user === void 0 ? void 0 : user.email), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, \"123 React Lane\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, \"Los Angeles, CA\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  }, \"Review items and delivery\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 11\n    }\n  }, basket.map(item => /*#__PURE__*/React.createElement(CheckoutProduct, {\n    id: item.id,\n    title: item.title,\n    image: item.image,\n    price: item.price,\n    rating: item.rating,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, \"Payment Method\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"payment__priceContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyFormat, {\n    renderText: value => /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 40\n      }\n    }, \"Order Total: \", value),\n    decimalScale: 2,\n    value: getBasketTotal(basket),\n    displayType: \"text\",\n    thousandSeparator: true,\n    prefix: \"â‚¦\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(PaystackHookExample, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 23\n    }\n  }, error)))));\n}\n\nexport default Payment;","map":{"version":3,"sources":["/home/ghimmy/Desktop/My React App/amazon-test/src/Payment.js"],"names":["React","useState","useEffect","useStateValue","CheckoutProduct","Link","useHistory","CardElement","useStripe","useElements","CurrencyFormat","getBasketTotal","axios","usePaystackPayment","PaystackHookExample","history","basket","user","dispatch","config","reference","Date","getMilliseconds","email","amount","publicKey","onSuccess","console","log","type","replace","onClose","initializePayment","Payment","succeeded","setSucceeded","processing","setProcessing","error","setError","disabled","setDisabled","clientSecret","setClientSecret","handleSubmit","event","preventDefault","method","url","data","currency","then","response","handleChange","empty","message","length","map","item","id","title","image","price","rating","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,eAAP;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;AACA;;AACA,SAASC,kBAAT,QAAmC,gBAAnC;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAChC,QAAMC,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAM,CAAC;AAAEU,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAAmBC,QAAnB,IAA+Bf,aAAa,EAAlD;AACA,QAAMgB,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAG,IAAIC,IAAJ,EAAD,CAAaC,eAAb,EADE;AAEbC,IAAAA,KAAK,EAAE,kBAFM;AAGbC,IAAAA,MAAM,EAAG,GAAEb,cAAc,CAACK,MAAD,CAAd,GAAyB,GAAI,EAH3B;AAIbS,IAAAA,SAAS,EAAE;AAJE,GAAf,CAHgC,CAUlC;;AACA,QAAMC,SAAS,GAAIN,SAAD,IAAe;AAC/B;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACAF,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;AAIAd,IAAAA,OAAO,CAACe,OAAR,CAAgB,SAAhB;AACD,GARD,CAXkC,CAqBlC;;;AACA,QAAMC,OAAO,GAAG,MAAM;AACpB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,GAHD;;AAKI,QAAMI,iBAAiB,GAAGnB,kBAAkB,CAACM,MAAD,CAA5C;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAE,MAAM;AACnBa,MAAAA,iBAAiB,CAACN,SAAD,EAAYK,OAAZ,CAAjB;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CADF;AAOH,CAnCD;;AAqCA,SAASE,OAAT,GAAmB;AACjB,QAAM,CAAC;AAAEjB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,EAAmBC,QAAnB,IAA+Bf,aAAa,EAAlD;AAEA,QAAM,CAAC+B,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACmC,UAAD,EAAaC,aAAb,IAA8BpC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACqC,KAAD,EAAQC,QAAR,IAAoBtC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACuC,QAAD,EAAWC,WAAX,IAA0BxC,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACyC,YAAD,EAAeC,eAAf,IAAkC1C,QAAQ,CAAC,IAAD,CAAhD,CAPiB,CASjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA,QAAM2C,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACAA,IAAAA,KAAK,CAACC,cAAN;AACAT,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,UAAMzB,KAAK,CAAC;AACVmC,MAAAA,MAAM,EAAE,MADE;AAEV;AACAC,MAAAA,GAAG,EAAG,0BAAyBrC,cAAc,CAACK,MAAD,CAAd,GAAyB,GAAI,EAHlD;AAIViC,MAAAA,IAAI,EAAE;AACJ1B,QAAAA,KAAK,EAAE,oBADH;AAEJ2B,QAAAA,QAAQ,EAAE;AAFN;AAJI,KAAD,CAAL,CAQHC,IARG,CASHC,QAAD,IAAc;AACZzB,MAAAA,OAAO,CAACC,GAAR,CAAYwB,QAAZ;AACD,KAXG,EAYHd,KAAD,IAAW;AACTX,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACD,KAdG,CAAN,CAJoC,CAqBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,aAAa,CAAC,KAAD,CAAb,CA3CoC,CA6CpC;AACD,GA9CD;;AAgDA,QAAMgB,YAAY,GAAIR,KAAD,IAAW;AAC9B;AACA;AACAJ,IAAAA,WAAW,CAACI,KAAK,CAACS,KAAP,CAAX;AACAf,IAAAA,QAAQ,CAACM,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYiB,OAA1B,GAAoC,EAArC,CAAR;AACD,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACY,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBvC,MAAtB,aAAsBA,MAAtB,uBAAsBA,MAAM,CAAEwC,MAA9B,WADZ,MADF,eAME;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIvC,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEM,KAAV,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHF,CAJF,CANF,eAkBE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,MAAM,CAACyC,GAAP,CAAYC,IAAD,iBACV,oBAAC,eAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACC,EADX;AAEE,IAAA,KAAK,EAAED,IAAI,CAACE,KAFd;AAGE,IAAA,KAAK,EAAEF,IAAI,CAACG,KAHd;AAIE,IAAA,KAAK,EAAEH,IAAI,CAACI,KAJd;AAKE,IAAA,MAAM,EAAEJ,IAAI,CAACK,MALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAJF,CAlBF,eAoCE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAGC,KAAD,iBAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkBA,KAAlB,CADzB;AAEE,IAAA,YAAY,EAAE,CAFhB;AAGE,IAAA,KAAK,EAAErD,cAAc,CAACK,MAAD,CAHvB;AAIE,IAAA,WAAW,EAAE,MAJf;AAKE,IAAA,iBAAiB,EAAE,IALrB;AAME,IAAA,MAAM,EAAE,GANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,eA0BE,oBAAE,mBAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BF,EA6BGsB,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,KAAN,CA7BZ,CAJF,CApCF,CADF,CADF;AA8ED;;AAED,eAAeL,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport CheckoutProduct from \"./CheckoutProduct\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getBasketTotal } from \"./reducer\";\nimport axios from \"./axios\";\n// // import { v5 as uuidv5 } from 'uuid';\n// import { db } from \"./firebase\";\nimport { usePaystackPayment } from 'react-paystack';\n\nconst PaystackHookExample = () => {\n  const history = useHistory();\n  const [{ basket, user }, dispatch] = useStateValue();\n  const config = {\n    reference: (new Date()).getMilliseconds(),\n    email: \"user@example.com\",\n    amount: `${getBasketTotal(basket) * 100}`,\n    publicKey: 'pk_test_62b5022242e04bcea510a48244390c6d18a4581f',\n};\n\n// you can call this function anything\nconst onSuccess = (reference) => {\n  // Implementation for whatever you want to do with reference and after success call.\n  console.log(reference);\n  dispatch({\n    type: \"EMPTY_BASKET\",\n  });\n\n  history.replace(\"/orders\");\n};\n\n// you can call this function anything\nconst onClose = () => {\n  // implementation for  whatever you want to do when the Paystack dialog closed.\n  console.log('closed')\n}\n\n    const initializePayment = usePaystackPayment(config);\n    return (\n      <div>\n          <button onClick={() => {\n              initializePayment(onSuccess, onClose)\n          }}>Paystack Hooks Implementation</button>\n      </div>\n    );\n};\n\nfunction Payment() {\n  const [{ basket, user }, dispatch] = useStateValue();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(true);\n\n  // useEffect(() => {\n  //   // generate the special stripe secret which allows us to charge a customer\n  //   const getClientSecret = async () => {\n  //     const response = await axios({\n  //       method: \"post\",\n  //       // Stripe expects the total in a currencies subunits\n  //       url: `/payments/create?total=${getBasketTotal(basket) * 100}`,\n  //       data: {\n  //         email: 'customer@email.com',\n  //        currency: 'NGN'\n  //       }\n  //     }).then((response) => {\n  //       console.log(response);\n  //     }, (error) => {\n  //       console.log(error);\n  //     })\n  //     setClientSecret(response.data.clientSecret);\n  //   };\n\n  //   getClientSecret();\n  // }, [basket]);\n\n  // console.log(\"THE SECRET IS >>>\", clientSecret);\n  // console.log('ðŸ‘±', user)\n\n  const handleSubmit = async (event) => {\n    // do all the fancy stripe stuff...\n    event.preventDefault();\n    setProcessing(true);\n    await axios({\n      method: \"post\",\n      // Stripe expects the total in a currencies subunits\n      url: `/payments/create?total=${getBasketTotal(basket) * 100}`,\n      data: {\n        email: \"customer@email.com\",\n        currency: \"NGN\",\n      },\n    }).then(\n      (response) => {\n        console.log(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n\n    // await stripe\n    //   .confirmCardPayment(clientSecret, {\n    //     payment_method: {\n    //       card: elements.getElement(CardElement),\n    //     },\n    //   })\n    //   .then(({ paymentIntent }) => {\n    //     // paymentIntent = payment confirmation\n    //     console.log(\"THE PAYMENT INTENT IS >>>\", paymentIntent);\n\n    //     db.collection(\"users\")\n    //       .doc(user?.uid)\n    //       .collection(\"orders\")\n    //       .doc(paymentIntent.id)\n    //       .set({\n    //         basket: basket,\n    //         amount: paymentIntent.amount,\n    //         created: paymentIntent.created,\n    //       });\n\n    setSucceeded(true);\n    setError(null);\n    setProcessing(false);\n\n    //   });\n  };\n\n  const handleChange = (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  return (\n    <div className=\"payment\">\n      <div className=\"payment__container\">\n        <h1>\n          Checkout (<Link to=\"/checkout\">{basket?.length} items</Link>)\n        </h1>\n\n        {/* Payment section - delivery address */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Delivery Address</h3>\n          </div>\n          <div className=\"payment__address\">\n            <p>{user?.email}</p>\n            <p>123 React Lane</p>\n            <p>Los Angeles, CA</p>\n          </div>\n        </div>\n\n        {/* Payment section - Review Items */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Review items and delivery</h3>\n          </div>\n          <div className=\"payment__items\">\n            {basket.map((item) => (\n              <CheckoutProduct\n                id={item.id}\n                title={item.title}\n                image={item.image}\n                price={item.price}\n                rating={item.rating}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Payment section - Payment method */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Payment Method</h3>\n          </div>\n          <div className=\"payment__details\">\n            {/* Stripe magic will go */}\n\n            {/* <form onSubmit={handleSubmit}> */}\n            {/* <CardElement onChange={handleChange} /> */}\n\n            <div className=\"payment__priceContainer\">\n              <CurrencyFormat\n                renderText={(value) => <h3>Order Total: {value}</h3>}\n                decimalScale={2}\n                value={getBasketTotal(basket)}\n                displayType={\"text\"}\n                thousandSeparator={true}\n                prefix={\"â‚¦\"}\n              />\n              {/* <button\n                onClick={handleSubmit}\n                disabled={processing || disabled || succeeded}\n              ></button>\n              <button\n                disabled={processing || disabled || succeeded}\n                type=\"submit\"\n              >\n                <span>{processing ? <p>Processing</p> : \"Buy Now\"}</span>\n              </button> */}\n            </div>\n            < PaystackHookExample />\n\n            {/* Errors */}\n            {error && <div>{error}</div>}\n            {/* </form> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Payment;\n"]},"metadata":{},"sourceType":"module"}