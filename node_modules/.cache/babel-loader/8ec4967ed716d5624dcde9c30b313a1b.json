{"ast":null,"code":"import _regeneratorRuntime from\"/home/ghimmy/Desktop/My React App/amazon-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ghimmy/Desktop/My React App/amazon-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/ghimmy/Desktop/My React App/amazon-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import\"./Payment.css\";import{useStateValue}from\"./StateProvider\";import CheckoutProduct from\"./CheckoutProduct\";import{Link,useHistory}from\"react-router-dom\";import{CardElement,useStripe,useElements}from\"@stripe/react-stripe-js\";import CurrencyFormat from\"react-currency-format\";import{getBasketTotal}from\"./reducer\";import axios from\"./axios\";// // import { v5 as uuidv5 } from 'uuid';\n// import { db } from \"./firebase\";\nimport{usePaystackPayment}from'react-paystack';var PaystackHookExample=function PaystackHookExample(){var history=useHistory();var _useStateValue=useStateValue(),_useStateValue2=_slicedToArray(_useStateValue,2),_useStateValue2$=_useStateValue2[0],basket=_useStateValue2$.basket,user=_useStateValue2$.user,dispatch=_useStateValue2[1];var config={reference:new Date().getMilliseconds(),email:\"user@example.com\",amount:\"\".concat(getBasketTotal(basket)*100),publicKey:'pk_test_62b5022242e04bcea510a48244390c6d18a4581f'};// you can call this function anything\nvar onSuccess=function onSuccess(reference){// Implementation for whatever you want to do with reference and after success call.\nconsole.log(reference);dispatch({type:\"EMPTY_BASKET\"});history.replace(\"/orders\");};// you can call this function anything\nvar onClose=function onClose(){// implementation for  whatever you want to do when the Paystack dialog closed.\nconsole.log('closed');};var initializePayment=usePaystackPayment(config);return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){initializePayment(onSuccess,onClose);}},\"Paystack Hooks Implementation\"));};function Payment(){var _useStateValue3=useStateValue(),_useStateValue4=_slicedToArray(_useStateValue3,2),_useStateValue4$=_useStateValue4[0],basket=_useStateValue4$.basket,user=_useStateValue4$.user,dispatch=_useStateValue4[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),succeeded=_useState2[0],setSucceeded=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),processing=_useState4[0],setProcessing=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),disabled=_useState8[0],setDisabled=_useState8[1];var _useState9=useState(true),_useState10=_slicedToArray(_useState9,2),clientSecret=_useState10[0],setClientSecret=_useState10[1];// useEffect(() => {\n//   // generate the special stripe secret which allows us to charge a customer\n//   const getClientSecret = async () => {\n//     const response = await axios({\n//       method: \"post\",\n//       // Stripe expects the total in a currencies subunits\n//       url: `/payments/create?total=${getBasketTotal(basket) * 100}`,\n//       data: {\n//         email: 'customer@email.com',\n//        currency: 'NGN'\n//       }\n//     }).then((response) => {\n//       console.log(response);\n//     }, (error) => {\n//       console.log(error);\n//     })\n//     setClientSecret(response.data.clientSecret);\n//   };\n//   getClientSecret();\n// }, [basket]);\n// console.log(\"THE SECRET IS >>>\", clientSecret);\n// console.log('ðŸ‘±', user)\nvar handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// do all the fancy stripe stuff...\nevent.preventDefault();setProcessing(true);_context.next=4;return axios({method:\"post\",// Stripe expects the total in a currencies subunits\nurl:\"/payments/create?total=\".concat(getBasketTotal(basket)*100),data:{email:\"customer@email.com\",currency:\"NGN\"}}).then(function(response){console.log(response);},function(error){console.log(error);});case 4:// await stripe\n//   .confirmCardPayment(clientSecret, {\n//     payment_method: {\n//       card: elements.getElement(CardElement),\n//     },\n//   })\n//   .then(({ paymentIntent }) => {\n//     // paymentIntent = payment confirmation\n//     console.log(\"THE PAYMENT INTENT IS >>>\", paymentIntent);\n//     db.collection(\"users\")\n//       .doc(user?.uid)\n//       .collection(\"orders\")\n//       .doc(paymentIntent.id)\n//       .set({\n//         basket: basket,\n//         amount: paymentIntent.amount,\n//         created: paymentIntent.created,\n//       });\nsetSucceeded(true);setError(null);setProcessing(false);//   });\ncase 7:case\"end\":return _context.stop();}}},_callee);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();var handleChange=function handleChange(event){// Listen for changes in the CardElement\n// and display any errors as the customer types their card details\nsetDisabled(event.empty);setError(event.error?event.error.message:\"\");};return/*#__PURE__*/React.createElement(\"div\",{className:\"payment\"},/*#__PURE__*/React.createElement(\"div\",{className:\"payment__container\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Checkout (\",/*#__PURE__*/React.createElement(Link,{to:\"/checkout\"},basket===null||basket===void 0?void 0:basket.length,\" items\"),\")\"),/*#__PURE__*/React.createElement(\"div\",{className:\"payment__section\"},/*#__PURE__*/React.createElement(\"div\",{className:\"payment__title\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Delivery Address\")),/*#__PURE__*/React.createElement(\"div\",{className:\"payment__address\"},/*#__PURE__*/React.createElement(\"p\",null,user===null||user===void 0?void 0:user.email),/*#__PURE__*/React.createElement(\"p\",null,\"123 React Lane\"),/*#__PURE__*/React.createElement(\"p\",null,\"Los Angeles, CA\"))),/*#__PURE__*/React.createElement(\"div\",{className:\"payment__section\"},/*#__PURE__*/React.createElement(\"div\",{className:\"payment__title\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Review items and delivery\")),/*#__PURE__*/React.createElement(\"div\",{className:\"payment__items\"},basket.map(function(item){return/*#__PURE__*/React.createElement(CheckoutProduct,{id:item.id,title:item.title,image:item.image,price:item.price,rating:item.rating});}))),/*#__PURE__*/React.createElement(\"div\",{className:\"payment__section\"},/*#__PURE__*/React.createElement(\"div\",{className:\"payment__title\"},/*#__PURE__*/React.createElement(\"h3\",null,\"Payment Method\")),/*#__PURE__*/React.createElement(\"div\",{className:\"payment__details\"},/*#__PURE__*/React.createElement(\"div\",{className:\"payment__priceContainer\"},/*#__PURE__*/React.createElement(CurrencyFormat,{renderText:function renderText(value){return/*#__PURE__*/React.createElement(\"h3\",null,\"Order Total: \",value);},decimalScale:2,value:getBasketTotal(basket),displayType:\"text\",thousandSeparator:true,prefix:\"â‚¦\"})),/*#__PURE__*/React.createElement(PaystackHookExample,null),error&&/*#__PURE__*/React.createElement(\"div\",null,error)))));}export default Payment;","map":{"version":3,"sources":["/home/ghimmy/Desktop/My React App/amazon-test/src/Payment.js"],"names":["React","useState","useEffect","useStateValue","CheckoutProduct","Link","useHistory","CardElement","useStripe","useElements","CurrencyFormat","getBasketTotal","axios","usePaystackPayment","PaystackHookExample","history","basket","user","dispatch","config","reference","Date","getMilliseconds","email","amount","publicKey","onSuccess","console","log","type","replace","onClose","initializePayment","Payment","succeeded","setSucceeded","processing","setProcessing","error","setError","disabled","setDisabled","clientSecret","setClientSecret","handleSubmit","event","preventDefault","method","url","data","currency","then","response","handleChange","empty","message","length","map","item","id","title","image","price","rating","value"],"mappings":"yeAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAO,eAAP,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,OAASC,IAAT,CAAeC,UAAf,KAAiC,kBAAjC,CACA,OAASC,WAAT,CAAsBC,SAAtB,CAAiCC,WAAjC,KAAoD,yBAApD,CACA,MAAOC,CAAAA,cAAP,KAA2B,uBAA3B,CACA,OAASC,cAAT,KAA+B,WAA/B,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA;AACA;AACA,OAASC,kBAAT,KAAmC,gBAAnC,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAChC,GAAMC,CAAAA,OAAO,CAAGT,UAAU,EAA1B,CADgC,mBAEKH,aAAa,EAFlB,sFAEvBa,MAFuB,kBAEvBA,MAFuB,CAEfC,IAFe,kBAEfA,IAFe,CAEPC,QAFO,oBAGhC,GAAMC,CAAAA,MAAM,CAAG,CACbC,SAAS,CAAG,GAAIC,CAAAA,IAAJ,EAAD,CAAaC,eAAb,EADE,CAEbC,KAAK,CAAE,kBAFM,CAGbC,MAAM,WAAKb,cAAc,CAACK,MAAD,CAAd,CAAyB,GAA9B,CAHO,CAIbS,SAAS,CAAE,kDAJE,CAAf,CAOF;AACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACN,SAAD,CAAe,CAC/B;AACAO,OAAO,CAACC,GAAR,CAAYR,SAAZ,EACAF,QAAQ,CAAC,CACPW,IAAI,CAAE,cADC,CAAD,CAAR,CAIAd,OAAO,CAACe,OAAR,CAAgB,SAAhB,EACD,CARD,CAUA;AACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB;AACAJ,OAAO,CAACC,GAAR,CAAY,QAAZ,EACD,CAHD,CAKI,GAAMI,CAAAA,iBAAiB,CAAGnB,kBAAkB,CAACM,MAAD,CAA5C,CACA,mBACE,4CACI,8BAAQ,OAAO,CAAE,kBAAM,CACnBa,iBAAiB,CAACN,SAAD,CAAYK,OAAZ,CAAjB,CACH,CAFD,kCADJ,CADF,CAOH,CAnCD,CAqCA,QAASE,CAAAA,OAAT,EAAmB,qBACoB9B,aAAa,EADjC,uFACRa,MADQ,kBACRA,MADQ,CACAC,IADA,kBACAA,IADA,CACQC,QADR,kCAGiBjB,QAAQ,CAAC,KAAD,CAHzB,wCAGViC,SAHU,eAGCC,YAHD,8BAImBlC,QAAQ,CAAC,EAAD,CAJ3B,yCAIVmC,UAJU,eAIEC,aAJF,8BAKSpC,QAAQ,CAAC,IAAD,CALjB,yCAKVqC,KALU,eAKHC,QALG,8BAMetC,QAAQ,CAAC,IAAD,CANvB,yCAMVuC,QANU,eAMAC,WANA,8BAOuBxC,QAAQ,CAAC,IAAD,CAP/B,0CAOVyC,YAPU,gBAOIC,eAPJ,gBASjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA,GAAMC,CAAAA,YAAY,0FAAG,iBAAOC,KAAP,kHACnB;AACAA,KAAK,CAACC,cAAN,GACAT,aAAa,CAAC,IAAD,CAAb,CAHmB,sBAIbzB,CAAAA,KAAK,CAAC,CACVmC,MAAM,CAAE,MADE,CAEV;AACAC,GAAG,kCAA4BrC,cAAc,CAACK,MAAD,CAAd,CAAyB,GAArD,CAHO,CAIViC,IAAI,CAAE,CACJ1B,KAAK,CAAE,oBADH,CAEJ2B,QAAQ,CAAE,KAFN,CAJI,CAAD,CAAL,CAQHC,IARG,CASJ,SAACC,QAAD,CAAc,CACZzB,OAAO,CAACC,GAAR,CAAYwB,QAAZ,EACD,CAXG,CAYJ,SAACd,KAAD,CAAW,CACTX,OAAO,CAACC,GAAR,CAAYU,KAAZ,EACD,CAdG,CAJa,QAqBnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAH,YAAY,CAAC,IAAD,CAAZ,CACAI,QAAQ,CAAC,IAAD,CAAR,CACAF,aAAa,CAAC,KAAD,CAAb,CAEA;AA7CmB,sDAAH,kBAAZO,CAAAA,YAAY,4CAAlB,CAgDA,GAAMS,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACR,KAAD,CAAW,CAC9B;AACA;AACAJ,WAAW,CAACI,KAAK,CAACS,KAAP,CAAX,CACAf,QAAQ,CAACM,KAAK,CAACP,KAAN,CAAcO,KAAK,CAACP,KAAN,CAAYiB,OAA1B,CAAoC,EAArC,CAAR,CACD,CALD,CAOA,mBACE,2BAAK,SAAS,CAAC,SAAf,eACE,2BAAK,SAAS,CAAC,oBAAf,eACE,wDACY,oBAAC,IAAD,EAAM,EAAE,CAAC,WAAT,EAAsBvC,MAAtB,SAAsBA,MAAtB,iBAAsBA,MAAM,CAAEwC,MAA9B,UADZ,KADF,cAME,2BAAK,SAAS,CAAC,kBAAf,eACE,2BAAK,SAAS,CAAC,gBAAf,eACE,iDADF,CADF,cAIE,2BAAK,SAAS,CAAC,kBAAf,eACE,6BAAIvC,IAAJ,SAAIA,IAAJ,iBAAIA,IAAI,CAAEM,KAAV,CADF,cAEE,8CAFF,cAGE,+CAHF,CAJF,CANF,cAkBE,2BAAK,SAAS,CAAC,kBAAf,eACE,2BAAK,SAAS,CAAC,gBAAf,eACE,0DADF,CADF,cAIE,2BAAK,SAAS,CAAC,gBAAf,EACGP,MAAM,CAACyC,GAAP,CAAW,SAACC,IAAD,qBACV,oBAAC,eAAD,EACE,EAAE,CAAEA,IAAI,CAACC,EADX,CAEE,KAAK,CAAED,IAAI,CAACE,KAFd,CAGE,KAAK,CAAEF,IAAI,CAACG,KAHd,CAIE,KAAK,CAAEH,IAAI,CAACI,KAJd,CAKE,MAAM,CAAEJ,IAAI,CAACK,MALf,EADU,EAAX,CADH,CAJF,CAlBF,cAoCE,2BAAK,SAAS,CAAC,kBAAf,eACE,2BAAK,SAAS,CAAC,gBAAf,eACE,+CADF,CADF,cAIE,2BAAK,SAAS,CAAC,kBAAf,eAME,2BAAK,SAAS,CAAC,yBAAf,eACE,oBAAC,cAAD,EACE,UAAU,CAAE,oBAACC,KAAD,qBAAW,8CAAkBA,KAAlB,CAAX,EADd,CAEE,YAAY,CAAE,CAFhB,CAGE,KAAK,CAAErD,cAAc,CAACK,MAAD,CAHvB,CAIE,WAAW,CAAE,MAJf,CAKE,iBAAiB,CAAE,IALrB,CAME,MAAM,CAAE,GANV,EADF,CANF,cA0BE,oBAAE,mBAAF,MA1BF,CA6BGsB,KAAK,eAAI,+BAAMA,KAAN,CA7BZ,CAJF,CApCF,CADF,CADF,CA8ED,CAED,cAAeL,CAAAA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Payment.css\";\nimport { useStateValue } from \"./StateProvider\";\nimport CheckoutProduct from \"./CheckoutProduct\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { getBasketTotal } from \"./reducer\";\nimport axios from \"./axios\";\n// // import { v5 as uuidv5 } from 'uuid';\n// import { db } from \"./firebase\";\nimport { usePaystackPayment } from 'react-paystack';\n\nconst PaystackHookExample = () => {\n  const history = useHistory();\n  const [{ basket, user }, dispatch] = useStateValue();\n  const config = {\n    reference: (new Date()).getMilliseconds(),\n    email: \"user@example.com\",\n    amount: `${getBasketTotal(basket) * 100}`,\n    publicKey: 'pk_test_62b5022242e04bcea510a48244390c6d18a4581f',\n};\n\n// you can call this function anything\nconst onSuccess = (reference) => {\n  // Implementation for whatever you want to do with reference and after success call.\n  console.log(reference);\n  dispatch({\n    type: \"EMPTY_BASKET\",\n  });\n\n  history.replace(\"/orders\");\n};\n\n// you can call this function anything\nconst onClose = () => {\n  // implementation for  whatever you want to do when the Paystack dialog closed.\n  console.log('closed')\n}\n\n    const initializePayment = usePaystackPayment(config);\n    return (\n      <div>\n          <button onClick={() => {\n              initializePayment(onSuccess, onClose)\n          }}>Paystack Hooks Implementation</button>\n      </div>\n    );\n};\n\nfunction Payment() {\n  const [{ basket, user }, dispatch] = useStateValue();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(true);\n\n  // useEffect(() => {\n  //   // generate the special stripe secret which allows us to charge a customer\n  //   const getClientSecret = async () => {\n  //     const response = await axios({\n  //       method: \"post\",\n  //       // Stripe expects the total in a currencies subunits\n  //       url: `/payments/create?total=${getBasketTotal(basket) * 100}`,\n  //       data: {\n  //         email: 'customer@email.com',\n  //        currency: 'NGN'\n  //       }\n  //     }).then((response) => {\n  //       console.log(response);\n  //     }, (error) => {\n  //       console.log(error);\n  //     })\n  //     setClientSecret(response.data.clientSecret);\n  //   };\n\n  //   getClientSecret();\n  // }, [basket]);\n\n  // console.log(\"THE SECRET IS >>>\", clientSecret);\n  // console.log('ðŸ‘±', user)\n\n  const handleSubmit = async (event) => {\n    // do all the fancy stripe stuff...\n    event.preventDefault();\n    setProcessing(true);\n    await axios({\n      method: \"post\",\n      // Stripe expects the total in a currencies subunits\n      url: `/payments/create?total=${getBasketTotal(basket) * 100}`,\n      data: {\n        email: \"customer@email.com\",\n        currency: \"NGN\",\n      },\n    }).then(\n      (response) => {\n        console.log(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n\n    // await stripe\n    //   .confirmCardPayment(clientSecret, {\n    //     payment_method: {\n    //       card: elements.getElement(CardElement),\n    //     },\n    //   })\n    //   .then(({ paymentIntent }) => {\n    //     // paymentIntent = payment confirmation\n    //     console.log(\"THE PAYMENT INTENT IS >>>\", paymentIntent);\n\n    //     db.collection(\"users\")\n    //       .doc(user?.uid)\n    //       .collection(\"orders\")\n    //       .doc(paymentIntent.id)\n    //       .set({\n    //         basket: basket,\n    //         amount: paymentIntent.amount,\n    //         created: paymentIntent.created,\n    //       });\n\n    setSucceeded(true);\n    setError(null);\n    setProcessing(false);\n\n    //   });\n  };\n\n  const handleChange = (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  return (\n    <div className=\"payment\">\n      <div className=\"payment__container\">\n        <h1>\n          Checkout (<Link to=\"/checkout\">{basket?.length} items</Link>)\n        </h1>\n\n        {/* Payment section - delivery address */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Delivery Address</h3>\n          </div>\n          <div className=\"payment__address\">\n            <p>{user?.email}</p>\n            <p>123 React Lane</p>\n            <p>Los Angeles, CA</p>\n          </div>\n        </div>\n\n        {/* Payment section - Review Items */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Review items and delivery</h3>\n          </div>\n          <div className=\"payment__items\">\n            {basket.map((item) => (\n              <CheckoutProduct\n                id={item.id}\n                title={item.title}\n                image={item.image}\n                price={item.price}\n                rating={item.rating}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Payment section - Payment method */}\n        <div className=\"payment__section\">\n          <div className=\"payment__title\">\n            <h3>Payment Method</h3>\n          </div>\n          <div className=\"payment__details\">\n            {/* Stripe magic will go */}\n\n            {/* <form onSubmit={handleSubmit}> */}\n            {/* <CardElement onChange={handleChange} /> */}\n\n            <div className=\"payment__priceContainer\">\n              <CurrencyFormat\n                renderText={(value) => <h3>Order Total: {value}</h3>}\n                decimalScale={2}\n                value={getBasketTotal(basket)}\n                displayType={\"text\"}\n                thousandSeparator={true}\n                prefix={\"â‚¦\"}\n              />\n              {/* <button\n                onClick={handleSubmit}\n                disabled={processing || disabled || succeeded}\n              ></button>\n              <button\n                disabled={processing || disabled || succeeded}\n                type=\"submit\"\n              >\n                <span>{processing ? <p>Processing</p> : \"Buy Now\"}</span>\n              </button> */}\n            </div>\n            < PaystackHookExample />\n\n            {/* Errors */}\n            {error && <div>{error}</div>}\n            {/* </form> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Payment;\n"]},"metadata":{},"sourceType":"module"}