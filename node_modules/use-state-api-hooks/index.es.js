import { useState, useMemo } from 'react';

var useStateApi = function (apiFactory, initialState) {
  var _a = useState(initialState),
      state = _a[0],
      setState = _a[1];

  return useMemo(function () {
    return apiFactory({
      state: state,
      setState: setState
    });
  }, [state, setState, apiFactory]);
};

var anchorElStateApiFactory = function (_a) {
  var state = _a.state,
      setState = _a.setState;
  return {
    clearAnchorEl: function () {
      return setState(null);
    },
    setAnchorEl: function (event) {
      setState(event.currentTarget);
    },
    anchorEl: state
  };
};
var useAnchorElStateApi = function (initialValue) {
  return useStateApi(anchorElStateApiFactory, initialValue);
};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var deleteAt = function (index, state) {
  if (index >= 0 && index < state.length) {
    return __spreadArrays(state.slice(0, index), state.slice(index + 1, state.length));
  }

  return state;
};
var clear = function () {
  return [];
};
var pop = function (state) {
  if (state.length > 0) {
    return __spreadArrays(state.slice(0, state.length - 1));
  }

  return state;
};
var push = function (val, state) {
  return __spreadArrays(state, val);
};
var shift = function (state) {
  if (state.length > 0) {
    return deleteAt(0, state);
  }

  return state;
};
var unshift = function (val, state) {
  return __spreadArrays(val, state);
};
var reverse = function (state) {
  return __spreadArrays(state.reverse());
};
var insertAt = function (val, index, state) {
  if (index >= 0 && index < state.length) {
    return __spreadArrays(state.slice(0, index), [val], state.slice(index));
  }

  return state;
};
var upsertAt = function (val, index, state) {
  if (index >= 0 && index < state.length) {
    state[index] = val;
    return __spreadArrays(state);
  }

  return state;
};

var arrayStateApiFactory = function (_a) {
  var state = _a.state,
      setState = _a.setState;
  return {
    clear: function () {
      return setState(clear());
    },
    reverse: function () {
      return setState(reverse(state));
    },
    pop: function () {
      return setState(pop(state));
    },
    push: function () {
      var val = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        val[_i] = arguments[_i];
      }

      return setState(push(val, state));
    },
    shift: function () {
      return setState(shift(state));
    },
    unshift: function () {
      var val = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        val[_i] = arguments[_i];
      }

      return setState(unshift(val, state));
    },
    insertAt: function (val, index) {
      return setState(insertAt(val, index, state));
    },
    upsertAt: function (val, index) {
      return setState(upsertAt(val, index, state));
    },
    deleteAt: function (index) {
      return setState(deleteAt(index, state));
    },
    state: state,
    setState: setState
  };
};
var useArrayStateApi = function (initialState) {
  return useStateApi(arrayStateApiFactory, initialState);
};

var booleanStateApiFactory = function (_a) {
  var state = _a.state,
      setState = _a.setState;
  return {
    setTrue: function () {
      return setState(true);
    },
    setFalse: function () {
      return setState(false);
    },
    toggle: function () {
      return setState(!state);
    },
    state: state,
    setState: setState
  };
};
var useBooleanStateApi = function (initialState) {
  return useStateApi(booleanStateApiFactory, initialState);
};

var incrementBy = function (val, state) {
  var max = state.max,
      count = state.count;

  if (max !== undefined && count + val > max) {
    return __assign(__assign({}, state), {
      count: max
    });
  } else {
    return __assign(__assign({}, state), {
      count: count + val
    });
  }
};
var decrementBy = function (val, state) {
  var min = state.min,
      count = state.count;

  if (min !== undefined && count - val <= min) {
    return __assign(__assign({}, state), {
      count: min
    });
  } else {
    return __assign(__assign({}, state), {
      count: count - val
    });
  }
};

var counterStateApiFactory = function (_a) {
  var state = _a.state,
      setState = _a.setState;
  return __assign(__assign({
    increment: function () {
      return setState(incrementBy(1, state));
    },
    decrement: function () {
      return setState(decrementBy(1, state));
    },
    incrementBy: function (val) {
      return setState(incrementBy(val, state));
    },
    decrementBy: function (val) {
      return setState(decrementBy(val, state));
    }
  }, state), {
    setState: setState
  });
};
var useCounterStateApi = function (_a) {
  var count = _a.count,
      _b = _a.min,
      min = _b === void 0 ? 0 : _b,
      max = _a.max;
  return useStateApi(counterStateApiFactory, {
    count: count,
    min: min,
    max: max
  });
};

var findIndex = function (arr, value) {
  return arr.findIndex(function (element) {
    return JSON.stringify(element) === JSON.stringify(value);
  });
};

var toggle = function (values, state) {
  var stateCopy = __spreadArrays(state);

  values.forEach(function (value) {
    var index = findIndex(stateCopy, value);

    if (index >= 0) {
      stateCopy.splice(index, 1);
    } else {
      stateCopy.push(value);
    }
  });
  return stateCopy;
};
var push$1 = function (values, state) {
  var uniqueNewVals = [];
  values.forEach(function (value) {
    if (findIndex(state, value) < 0) {
      uniqueNewVals.push(value);
    }
  });
  return push(uniqueNewVals, state);
};
var unshift$1 = function (values, state) {
  var uniqueNewVals = [];
  values.forEach(function (value) {
    if (findIndex(state, value) < 0) {
      uniqueNewVals.push(value);
    }
  });
  return unshift(uniqueNewVals, state);
};
var upsertAt$1 = function (val, index, state) {
  var indexOfVal = findIndex(state, val);

  if (indexOfVal < 0) {
    return upsertAt(val, index, state);
  }

  return state;
};
var insertAt$1 = function (val, index, state) {
  var indexOfVal = findIndex(state, val);

  if (indexOfVal < 0) {
    return insertAt(val, index, state);
  }

  return state;
};

var uniqueArrayStateApiFactory = function (_a) {
  var state = _a.state,
      setState = _a.setState;
  return __assign(__assign({}, arrayStateApiFactory({
    state: state,
    setState: setState
  })), {
    push: function () {
      var val = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        val[_i] = arguments[_i];
      }

      return setState(push$1(val, state));
    },
    toggle: function () {
      var val = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        val[_i] = arguments[_i];
      }

      return setState(toggle(val, state));
    },
    unshift: function () {
      var val = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        val[_i] = arguments[_i];
      }

      return setState(unshift$1(val, state));
    },
    insertAt: function (val, index) {
      return setState(insertAt$1(val, index, state));
    },
    upsertAt: function (val, index) {
      return setState(upsertAt$1(val, index, state));
    },
    state: state,
    setState: setState
  });
};
var useUniqueArrayStateApi = function (initialState) {
  return useStateApi(uniqueArrayStateApiFactory, initialState);
};

var createTestApi = function (apiFactory, defaultValue) {
  var state = defaultValue;

  var setState = function (updater) {
    if (typeof updater === 'function') {
      state = updater(state);
    } else {
      state = updater;
    } // tslint:disable:no-use-before-declare


    ref.api = apiFactory({
      state: state,
      setState: setState
    });
  };

  var ref = {
    api: apiFactory({
      state: state,
      setState: setState
    })
  };
  return ref;
};

export { anchorElStateApiFactory, arrayStateApiFactory, booleanStateApiFactory, counterStateApiFactory, createTestApi, uniqueArrayStateApiFactory, useAnchorElStateApi, useArrayStateApi, useBooleanStateApi, useCounterStateApi, useStateApi, useUniqueArrayStateApi };
//# sourceMappingURL=index.es.js.map
