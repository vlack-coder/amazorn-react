import { State } from './types';
import { ArrayStateApi } from '../array/useArrayStateApi';
export interface UniqueArrayStateApi<T> extends ArrayStateApi<T> {
    push: (...vals: T[]) => void;
    unshift: (...vals: T[]) => void;
    toggle: (...vals: T[]) => void;
    insertAt: (val: T, index: number) => void;
    upsertAt: (val: T, index: number) => void;
    state: T[];
    setState: (val: T[]) => void;
}
declare type Props<T> = {
    state: State<T>;
    setState: (state: State<T>) => void;
};
export declare const uniqueArrayStateApiFactory: <T>({ state, setState }: Props<T>) => UniqueArrayStateApi<T>;
export declare const useUniqueArrayStateApi: <T>(initialState: T[]) => UniqueArrayStateApi<T>;
export {};
